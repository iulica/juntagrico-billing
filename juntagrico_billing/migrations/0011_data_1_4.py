# Generated by Django 3.2 on 2021-04-18 17:16
from django.db import migrations
import logging

logger = logging.getLogger(__name__)


def migrate_bill_items(apps, schema_editor):
    """
    change bill items to reference subscription parts
    instead of subscription types or extrasubscription types
    """
    logger.info('migrate_bill_items')
    BillItem = apps.get_model('juntagrico_billing', 'BillItem')
    SubscriptionPart = apps.get_model('juntagrico', 'SubscriptionPart')

    # build dict of non-extra subscription parts by member
    # there should only be 1 per member right now
    s_parts_per_member = dict([
        (part.subscription.primary_member, part) for
        part in SubscriptionPart.objects.filter(type__size__product__is_extra=False)
    ])
    logger.info('built subscriptions dict (%d)' % len(s_parts_per_member))

    # build dict of extra subscription parts by member and product name
    e_parts_per_member_and_name = dict([
        ((part.subscription.primary_member, part.type.size.product.name), part) for
        part in SubscriptionPart.objects.filter(type__size__product__is_extra=True)
    ])
    logger.info('built extrasubcriptions dict (%d)' % len(e_parts_per_member_and_name))

    for itm in BillItem.objects.all():
        member = itm.bill.member
        if itm.subscription_type:
            # migrate subscription BillItem
            # we can get the matching part by member
            try:
                itm.subscription_part = s_parts_per_member[member]
            except KeyError:
                logger.error(f'no subscription_part found for subscription_type {itm.subscription_type.id} and member {member.id}')
        elif itm.extrasubscription_type:
            # migrate extrasubscription BillItem
            # we find the matching part by member
            # and category name
            name = itm.extrasubscription_type.category.name
            try:
                itm.subscription_part = e_parts_per_member_and_name[(member, name)]
            except KeyError:
                logger.error(f'no subscription_part found for extrasubscription_type {itm.extrasubscription_type.id}, member {member.id}, name {name}')
        itm.save()


def migrate_extrasubscription_accounts(apps, schema_editor):
    """
    create new subscription type account objects for each
    extrasubscription category account
    """
    SubscriptionType = apps.get_model('juntagrico', 'SubscriptionType')
    ExtraSubscriptionCategoryAccount = apps.get_model('juntagrico_billing', 'ExtraSubscriptionCategoryAccount')
    SubscriptionTypeAccount = apps.get_model('juntagrico_billing', 'SubscriptionTypeAccount')

    type_by_name = dict([
        (subtype.size.product.name, subtype) for
        subtype in SubscriptionType.objects.filter(size__product__is_extra=True)
    ])
    logger.info('created type by name dict (%d)' % len(type_by_name))

    for e_acct in ExtraSubscriptionCategoryAccount.objects.all():
        name = e_acct.extrasubcategory.name
        acct_data = {
            'subscriptiontype': type_by_name[name],
            'account': e_acct.account
        }
        SubscriptionTypeAccount.objects.create(**acct_data)
        logger.info('migrated ExtraSubscriptionCategoryAccount %s, account %s' % (name, e_acct.account))


class Migration(migrations.Migration):

    dependencies = [
        ('juntagrico', '0032_data_1_4'),
        ('juntagrico_billing', '0010_pre_1_4'),
    ]

    operations = [
        migrations.RunPython(migrate_bill_items),
        migrations.RunPython(migrate_extrasubscription_accounts)
    ]
